vec3 half_tone_accumulative(sampler2D image, float grid_size, float smoothing) 
{
	vec4 grid_rot = vec4(15.0, 45.0, 75.0, 0.0);
	vec2 offsets[4];
	offsets[0] = vec2(-1.0,  0.0);
	offsets[1] = vec2( 0.0,  1.0);
	offsets[2] = vec2( 1.0,  0.0);
	offsets[3] = vec2( 0.0, -1.0);

	float half_grid_size = grid_size / 2.0;
	
	vec3 rgb = vec3(0.0);
	for(int i = 0; i < 3; ++i)	
	{
		float angle = radians(grid_rot[i]);
		float SA = sin(angle);
		float CA = cos(angle);
		
		mat2 matA = mat2(vec2(CA,  SA), vec2(-SA, CA));
		mat2 matB = mat2(vec2(CA, -SA), vec2( SA, CA));
		
		vec2 grid_frag = matB * gl_FragCoord.xy;
		vec2 grid_origin = vec2(floor(grid_frag.x/grid_size), floor(grid_frag.y/grid_size));
		
		vec2 tmp = grid_frag / vec2(grid_size);
		bool frag_t = tmp.y - floor(tmp.y) > half_grid_size;
		bool frag_r = tmp.x - floor(tmp.x) > half_grid_size;
		if(frag_t) grid_origin.y += 1.0;
		if(frag_r) grid_origin.x += 1.0;
		
		vec2 grid_dot = (grid_origin * grid_size) + vec2(half_grid_size);
		vec2 render_dot = matA * grid_dot;
		vec4 sample = texture2D(image, render_dot);
		
		float radius = sample[i] * (grid_size * 1.50 / 2.0);
		float dist = distance(gl_FragCoord.xy, render_dot);
		if(dist < radius)	
		{
			rgb[i] += smoothstep(radius, radius - (radius * smoothing), dist);
		}
		
		for(int j = 0; j < 4; ++j)	
		{
			grid_dot = ((grid_origin + offset[j]) * grid_size) + 
			vec2(half_grid_size) 

			render_dot = matA * grid_dot;
			sample = texture2D(image, render_dot);
						
			dist = distance(gl_FragCoord.xy, render_dot);
			radius = sample[i] * (grid_size * 1.50 / 2.0);
			if(dist < radius)	
			{
				rgb[i] += smoothstep(radius, radius-(radius*smoothing), dist);
			}
		}
	}
	
	return rgb;
}